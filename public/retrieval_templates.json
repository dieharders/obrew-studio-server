{
  "CONTEXT_ONLY": {
    "name": "Basic Retrieval",
    "text": "{{context_str}}\n{{query_str}}"
  },
  "EVALUATE": {
    "name": "Evaluate",
    "text": "We have provided context information below. \n---------------------\n{{context_str}}\n---------------------\nGiven this information, think through step by step and evaluate reasoning before replying to the following: {{query_str}}\n"
  },
  "SUMMARY": {
    "name": "Summary",
    "text": "Write a summary of the following. Try to use only the information provided. Try to include as many key details as possible.\n\n\n{{context_str}}\n\n\nSUMMARY:\"\"\"\n"
  },
  "TREE_INSERT": {
    "name": "Insert",
    "text": "Context information is below. It is provided in a numbered list (1 to {{num_chunks}}), where each item in the list corresponds to a summary.\n---------------------\n{{context_str}}\n---------------------\nGiven the context information, here is a new piece of information: {{new_chunk_text}}\nAnswer with the number corresponding to the summary that should be updated. The answer should be the number corresponding to the summary that is most relevant to the question.\n"
  },
  "TREE_SELECT": {
    "name": "Single Choice",
    "text": "Some choices are given below. It is provided in a numbered list (1 to {{num_chunks}}), where each item in the list corresponds to a summary.\n---------------------\n{{context_str}}\n---------------------\nUsing only the choices above and not prior knowledge, return the choice that is most relevant to the question: '{{query_str}}'\nProvide choice in the following format: 'ANSWER: <number>' and explain why this summary was selected in relation to the question.\n"
  },
  "TREE_SELECT_MULTIPLE": {
    "name": "Multiple Choice",
    "text": "Some choices are given below. It is provided in a numbered list (1 to {{num_chunks}}), where each item in the list corresponds to a summary.\n---------------------\n{{context_str}}\n---------------------\nUsing only the choices above and not prior knowledge, return the top choices (no more than {{branching_factor}}, ranked by most relevant to least) that are most relevant to the question: '{{query_str}}'\nProvide choices in the following format: 'ANSWER: <numbers>' and explain why these summaries were selected in relation to the question.\n"
  },
  "QUESTION_ANSWER": {
    "name": "Question & Answer",
    "text": "Context information is below.\n---------------------\n{{context_str}}\n---------------------\nGiven the context information and not prior knowledge, answer the query. Think through step by step and give explanation before replying to the following.\nQuery: {{query_str}}\nAnswer: "
  },
  "TREE_SUMMARY": {
    "name": "Summarize Multiple",
    "text": "Context information from multiple sources is below.\n---------------------\n{{context_str}}\n---------------------\nGiven the information from multiple sources and not prior knowledge, answer the query.\nQuery: {{query_str}}\nAnswer: "
  },
  "KEYWORD_EXTRACT": {
    "name": "Extract Keywords",
    "text": "Some text is provided below. Given the text, extract up to {{max_keywords}} keywords from the text. Avoid stopwords.\n---------------------\n{{context_str}}\n---------------------\nProvide keywords in the following comma-separated format: 'KEYWORDS: <keywords>'\n"
  },
  "QUERY_KEYWORD_EXTRACT": {
    "name": "Extract Keywords based on Query",
    "text": "A question is provided below. Given the question, extract up to {{max_keywords}} keywords from the text. Focus on extracting the keywords that we can use to best lookup answers to the question. Avoid stopwords.\n---------------------\n{{query_str}}\n---------------------\nProvide keywords in the following comma-separated format: 'KEYWORDS: <keywords>'\n"
  },
  "SCHEMA_EXTRACT": {
    "name": "Extract Schema",
    "text": "We wish to extract relevant fields from an unstructured text chunk into a structured schema. We first provide the unstructured text, and then we provide the schema that we wish to extract.\n-----------text-----------\n{{context_str}}\n-----------schema-----------\n{{schema}}\n---------------------\nGiven the text and schema, extract the relevant fields from the text in the following format: field1: <value>\nfield2: <value>\n...\n\nIf a field is not present in the text, don't include it in the output.If no fields are present in the text, return a blank string.\nFields: "
  },
  "TEXT_TO_SQL": {
    "name": "Text to SQL",
    "text": "Given an input question, first create a syntactically correct {{dialect}} query to run, then look at the results of the query and return the answer. You can order the results by a relevant column to return the most interesting examples in the database.\n\nNever query for all the columns from a specific table, only ask for a few relevant columns given the question.\n\nPay attention to use only the column names that you can see in the schema description. Be careful to not query for columns that do not exist. Pay attention to which column is in which table. Also, qualify column names with the table name when needed. You are required to use the following format, each taking one line:\n\nQuestion: Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer: Final answer here\n\nOnly use tables listed below.\n{{schema}}\n\nQuestion: {{query_str}}\nSQLQuery: "
  },
  "TEXT_TO_SQL_PGVECTOR": {
    "name": "Text to SQL Vector",
    "text": "Given an input question, first create a syntactically correct {{dialect}} query to run, then look at the results of the query and return the answer. You can order the results by a relevant column to return the most interesting examples in the database.\n\nPay attention to use only the column names that you can see in the schema description. Be careful to not query for columns that do not exist. Pay attention to which column is in which table. Also, qualify column names with the table name when needed.\n\nIMPORTANT NOTE: you can use specialized pgvector syntax (`<->`) to do nearest neighbors/semantic search to a given vector from an embeddings column in the table. The embeddings value for a given row typically represents the semantic meaning of that row. The vector represents an embedding representation of the question, given below. Do NOT fill in the vector values directly, but rather specify a `[query_vector]` placeholder. For instance, some select statement examples below (the name of the embeddings column is `embedding`):\nSELECT * FROM items ORDER BY embedding <-> '[query_vector]' LIMIT 5;\nSELECT * FROM items WHERE id != 1 ORDER BY embedding <-> (SELECT embedding FROM items WHERE id = 1) LIMIT 5;\nSELECT * FROM items WHERE embedding <-> '[query_vector]' < 5;\n\nYou are required to use the following format, each taking one line:\n\nQuestion: Question here\nSQLQuery: SQL Query to run\nSQLResult: Result of the SQLQuery\nAnswer: Final answer here\n\nOnly use tables listed below.\n{{schema}}\n\n\nQuestion: {{query_str}}\nSQLQuery: "
  },
  "TABLE_CONTEXT": {
    "name": "Tabular Context Task",
    "text": "We have provided a table schema below. ---------------------\n{{schema}}\n---------------------\nWe have also provided context information below. {{context_str}}\n---------------------\nGiven the context information and the table schema, give a response to the following task: {{query_str}}"
  },
  "TABLE_QUERY": {
    "name": "Tabular Context Query",
    "text": "Provide a high-level description of the table, as well as a description of each column in the table. Provide answers in the following format:\nTableDescription: <description>\nColumn1Description: <description>\nColumn2Description: <description>\n...\n\n"
  },
  "TABLE_REFINE": {
    "name": "Tabular Context Refine",
    "text": "We have provided a table schema below. ---------------------\n{{schema}}\n---------------------\nWe have also provided some context information below. {{context_str}}\n---------------------\nGiven the context information and the table schema, give a response to the following task: {{query_str}}\nWe have provided an existing answer: {{existing_answer}}\nGiven the new context, refine the original answer to better answer the question. If the context isn't useful, return the original answer."
  },
  "KNOWLEDGE_GRAPH_EXTRACT": {
    "name": "Extract Triplet",
    "text": "Some text is provided below. Given the text, extract up to {{max_knowledge_triplets}} knowledge triplets in the form of (subject, predicate, object). Avoid stopwords.\n---------------------\nExample:\nText: Alice is Bob's mother.\nTriplets:\n(Alice, is mother of, Bob)\nText: Philz is a coffee shop founded in Berkeley in 1982.\nTriplets:\n(Philz, is, coffee shop)\n(Philz, founded in, Berkeley)\n(Philz, founded in, 1982)\n---------------------\nText: {{context_str}}\nTriplets:\n"
  },
  "HYPOTHETICAL_DOC_EXTRACT": {
    "name": "Hypothetical Document",
    "text": "Please write a passage to answer the question.\nTry to include as many key details as possible.\n\n\n{{context_str}}\n\n\nPassage:\"\"\"\n"
  },
  "PANDAS_QUERY": {
    "name": "Pandas Data Query",
    "text": "You are working with a pandas dataframe in Python.\nThe name of the dataframe is `df`.\nThis is the result of `print(df.head())`:\n{df_str}\n\nHere is the input query: {{query_str}}.\nGiven the df information and the input query, please follow these instructions:\n{{instruction_str}}\nOutput:\n"
  },
  "CHOICE_SELECT": {
    "name": "Multiple Choice Question",
    "text": "A list of documents is shown below. Each document has a number next to it along with a summary of the document. A question is also provided. \nRespond with the numbers of the documents you should consult to answer the question, in order of relevance, as well as the relevance score. The relevance score is a number from 1-10 based on how relevant you think the document is to the question.\nDo not include any documents that are not relevant to the question. \nExample format: \nDocument 1:\n<summary of document 1>\n\nDocument 2:\n<summary of document 2>\n\n...\n\nDocument 10:\n<summary of document 10>\n\nQuestion: <question>\nAnswer:\nDoc: 9, Relevance: 7\nDoc: 3, Relevance: 4\nDoc: 7, Relevance: 3\n\nLet's try this now: \n\n{{context_str}}\nQuestion: {{query_str}}\nAnswer:\n"
  }
}
