name: 'Manual Release'

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release title'
        required: true
      release_type:
        description: 'Type of release (draft, private, public)'
        required: true
        default: 'draft'
      release_notes:
        description: 'Release notes'
        required: false

jobs:
  # Assumes you created a git tag with `yarn version --[operation]`
  # @TODO should this come last?
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.ref || github.ref_name }}
          release_name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.release_notes }}
          draft: ${{ github.event.inputs.release_type == 'draft' }} # not visible to the public
          prerelease: ${{ github.event.inputs.release_type == 'private' }} # visible only to collaborators

  build:
    name: Build for ${{ matrix.os }}
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] # builds for each platform, in seperate vm's, in this order
    continue-on-error: true
    steps:
      # 1. Pull down repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper Git submodule initialization
          ref: ${{ github.event.inputs.ref || github.ref }} # checks out code you specify in github UI

      # Only needed if we are building llama.cpp from source
      # - name: Install CUDA Toolkit (Windows)
      #   uses: Jimver/cuda-toolkit@master
      #   if: startsWith(runner.os, 'Windows')
      #   id: cuda-toolkit

      # 2. Install Python
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 3. Install package manager for Python
      - name: Install pip for Python
        shell: bash
        run: |
          python --version
          pip --version || python -m ensurepip --upgrade
          python -m pip install --upgrade pip setuptools wheel

      # 4. Install Python dependencies
      - name: Install Python deps
        shell: bash
        run: pip install -r requirements.release.txt

      # 5a. Build the app binary (pyinstaller) for Windows
      - name: Build app (Windows)
        shell: bash
        if: startsWith(runner.os, 'Windows')
        run: pyinstaller --noconfirm --onedir --windowed --icon "./backends/ui/favicon.ico" --name "Obrew-Server" --clean --no-embed-manifest --add-data "./public;public/" --add-data "./backends/ui/public;public/" --hidden-import "tiktoken_ext.openai_public" --hidden-import "tiktoken_ext" --add-data "${{ runner.temp }}/site-packages/posthog;posthog/" --add-data "${{ runner.temp }}/site-packages/chromadb;chromadb/" --add-data "${{ runner.temp }}/site-packages/importlib_resources;importlib_resources/" --add-data "${{ runner.temp }}/site-packages/backoff;backoff/" --add-data "${{ runner.temp }}/site-packages/pypika;pypika/" --add-data "${{ runner.temp }}/site-packages/hnswlib.cp312-win_amd64.pyd;." --add-data "./.env.example;.env" --add-data "./tools/functions;tools/functions/"  "./backends/main.py"

      # 5b. Build the app binary (pyinstaller) for macOS/Linux
      # Same command, but ; replaced with :
      - name: Build app (macOS/Linux)
        shell: bash
        if: runner.os != 'Windows'
        run: pyinstaller --noconfirm --onedir --windowed --icon "./backends/ui/favicon.ico" --name "Obrew-Server" --clean --no-embed-manifest --add-data "./public:public/" --add-data "./backends/ui/public:public/" --hidden-import "tiktoken_ext.openai_public" --hidden-import "tiktoken_ext" --add-data "${{ runner.temp }}/site-packages/posthog:posthog/" --add-data "${{ runner.temp }}/site-packages/chromadb:chromadb/" --add-data "${{ runner.temp }}/site-packages/importlib_resources:importlib_resources/" --add-data "${{ runner.temp }}/site-packages/backoff:backoff/" --add-data "${{ runner.temp }}/site-packages/pypika:pypika/" --add-data "${{ runner.temp }}/site-packages/hnswlib.cp312-win_amd64.pyd:." --add-data "./.env.example:.env" --add-data "./tools/functions:tools/functions/"  "./backends/main.py"

  package:
    name: Package for ${{ matrix.os }} and Upload Artifacts
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] # builds for each platform, in seperate vm's, in this order
    continue-on-error: true
    env:
      CMAKE_SOURCE_DIR: ${{ github.workspace }} # Points to the root of your repository
    steps:
      # 1. Set up CMake
      - name: Set up CMake
        uses: lukka/get-cmake@v4
        with:
          cmakeVersion: latest

      # 2. Set up Platform-Specific Dependencies
      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y nsis

      # 3. Configure with CMake
      - name: Configure CMake
        run: cmake -S $CMAKE_SOURCE_DIR -B build -D CMAKE_BUILD_TYPE=Release

      # 4. Package with CPack
      - name: Create installer package (CPack)
        run: cmake --build build --target package

      # 5. Zip all package files/folders in /build and put in /artifacts/windows-latest/
      - name: Zip assets (Windows)
        shell: pwsh
        if: startsWith(runner.os, 'Windows')
        # Ensure the output directory matches the OutputDir of CPack
        run: |
          mkdir -p ./artifacts/windows-latest
          Compress-Archive -Path "build/*.*" -DestinationPath ./artifacts/windows-latest/windows-latest-artifacts.zip

      # 6. Upload Installer Artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifact
          path: ./artifacts/${{ matrix.os }}/${{ matrix.os }}-artifacts.zip # upload from

  upload_assets:
    name: Upload Assets to Release
    needs: [build, package, create_release]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows artifact
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifact
          path: ./artifacts/windows

      - name: Upload Windows asset archive
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_upload_url }}
          asset_path: ./artifacts/windows/windows-latest-artifacts.zip # file location
          asset_name: ObrewServer.WIN.Setup.zip # display name on release page (not file name)
          asset_content_type: application/zip
