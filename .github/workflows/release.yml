name: 'Manual Release'

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release title'
        required: true
      release_type:
        description: 'Type of release (draft, private, public)'
        required: true
        default: 'draft'
      release_notes:
        description: 'Release notes'
        required: false

# permissions:
#     # Give the default GITHUB_TOKEN write permission to commit and push the
#     # added or changed files to the repository.
#     contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    # needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] # builds for each platform, in seperate vm's, in this order
    continue-on-error: true
    steps:
      # 1. Pull down repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper Git submodule initialization
          ref: ${{ github.event.inputs.ref || github.ref }} # checks out code you specify in github UI

      # Only needed if we are building llama.cpp from source
      # - name: Install CUDA Toolkit (Windows)
      #   uses: Jimver/cuda-toolkit@master
      #   if: startsWith(runner.os, 'Windows')
      #   id: cuda-toolkit

      # 2. Install Python
      - name: Install Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # cache: 'pip' # caches the downloaded package installers only, if you cache the venv then disabling this will save about 20s

      # 3. Load the cached python virtual environment
      - name: Restore cached venv
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.release.txt') }}
          path: .venv

      # 4. Create virtual environment, Install package manager and dependencies for Python
      - name: Setup venv (install deps)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          python -m venv .venv # noop if cache is found
          .venv/Scripts/activate
          .venv/Scripts/python -m pip list  # Verify installed packages
          # Install pip and Python deps
          .venv/Scripts/python --version
          .venv/Scripts/python -m pip install --upgrade pip setuptools wheel # upgrades pip to latest
          .venv/Scripts/python -m pip install -r requirements.release.txt # install deps, use --prefer-binary to install from wheels instead of source

      # 5. Cache python virtual environment for later runs
      - name: Save cached venv
        uses: actions/cache/save@v4
        with:
          key: venv-${{ runner.os }}-${{ steps.setup_python.outputs.python-version }}-${{ hashFiles('requirements.release.txt') }}
          path: .venv

      - name: List contents of GitHub workspace
        shell: bash
        run: |
          echo "Contents of the GitHub workspace directory:"
          ls -al "${{ github.workspace }}"
          echo ".venv/lib/site-packages"
          ls -al .venv/lib/site-packages
          # echo "Contents of the Python directory:"
          # ls -al "${{ env.pythonLocation }}"

      # 6a. Build the app binary (pyinstaller) for Windows
      - name: Build app (Windows)
        shell: bash
        if: runner.os == 'Windows'
        env:
          PATH: .venv/Scripts
        run: |
          env
          .venv/Scripts/activate # must activate env before each step
          pyinstaller --noconfirm --clean --onedir --windowed \
            --icon "${{ github.workspace }}/backends/ui/favicon.ico" \
            --name "Obrew-Server" \
            --distpath output \
            --hidden-import "tiktoken_ext.openai_public" \
            --hidden-import "tiktoken_ext" \
            # `env.pythonLocation` should be used if no venv
            --add-data "${{ github.workspace }}/public;public/" \
            --add-data "${{ github.workspace }}/backends/ui/public;public/" \
            --add-data ".venv/lib/site-packages/posthog;posthog/" \
            --add-data ".venv/lib/site-packages/chromadb;chromadb/" \
            --add-data ".venv/lib/site-packages/importlib_resources;importlib_resources/" \
            --add-data ".venv/lib/site-packages/backoff;backoff/" \
            --add-data ".venv/lib/site-packages/pypika;pypika/" \
            --add-data ".venv/lib/site-packages/hnswlib.cp312-win_amd64.pyd;." \
            --add-data "${{ github.workspace }}/.env.example;.env" \
            --add-data "${{ github.workspace }}/tools/functions;tools/functions/" \
            "${{ github.workspace }}/backends/main.py"

      # 6b. Build the app binary (pyinstaller) for macOS/Linux
      # Same command, but ; replaced with :
      - name: Build app (macOS/Linux)
        shell: bash
        if: runner.os != 'Windows'
        run: |
          pyinstaller --noconfirm --onedir --windowed \
            --icon "${{ github.workspace }}/backends/ui/favicon.ico" \
            --name "Obrew-Server" --clean \
            --add-data "${{ github.workspace }}/public:public/" \
            --add-data "${{ github.workspace }}/backends/ui/public:public/" \
            --hidden-import "tiktoken_ext.openai_public" \
            --hidden-import "tiktoken_ext" \
            --add-data ".venv/lib/site-packages/posthog:posthog/" \
            --add-data ".venv/lib/site-packages/chromadb:chromadb/" \
            --add-data ".venv/lib/site-packages/importlib_resources:importlib_resources/" \
            --add-data ".venv/lib/site-packages/backoff:backoff/" \
            --add-data ".venv/lib/site-packages/pypika:pypika/" \
            --add-data ".venv/lib/site-packages/hnswlib.cp312-win_amd64.pyd:." \
            --add-data "${{ github.workspace }}/.env.example:.env" \
            --add-data "${{ github.workspace }}/tools/functions:tools/functions/" \
            "${{ github.workspace }}/backends/main.py"

  package:
    name: Package for ${{ matrix.os }} and Upload Artifacts
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest] # builds for each platform, in seperate vm's, in this order
    continue-on-error: true
    steps:
      # 1. Set up CMake
      - name: Set up CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: latest

      # 2. Set up Platform-Specific Dependencies
      # - name: Install dependencies (Windows)
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install -y nsis

      # 3. Configure with CMake
      - name: Configure CMake
        run: cmake -S ${{ github.workspace }} -B build -D CMAKE_BUILD_TYPE=Release

      # 4. Package with CPack
      - name: Create installer package (CPack)
        run: cmake --build build --target package

      # 5. Zip all package files/folders in /build and put in /artifacts/windows-latest/
      - name: Zip assets (Windows)
        shell: pwsh
        if: startsWith(runner.os, 'Windows')
        # Ensure the output directory matches the OutputDir of CPack
        run: |
          mkdir -p ./artifacts/windows-latest
          Compress-Archive -Path "build/*.*" -DestinationPath ./artifacts/windows-latest/windows-latest-artifacts.zip

      # 6. Upload Installer Artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifact
          path: ./artifacts/${{ matrix.os }}/${{ matrix.os }}-artifacts.zip # upload from

  # Assumes you created a git tag already
  create_release:
    name: Create GitHub Release
    needs: [build, package]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.ref || github.ref_name }}
          release_name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.release_notes }}
          draft: ${{ github.event.inputs.release_type == 'draft' }} # not visible to the public
          prerelease: ${{ github.event.inputs.release_type == 'private' }} # visible only to collaborators

  upload_assets:
    name: Upload Assets to Release
    needs: [build, package, create_release]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows artifact
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: windows-latest-artifact
          path: ./artifacts/windows

      - name: Upload Windows asset archive
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.release_upload_url }}
          asset_path: ./artifacts/windows/windows-latest-artifacts.zip # file location
          asset_name: ObrewServer.WIN.Setup.zip # display name on release page (not file name)
          asset_content_type: application/zip
